#pragma once
#include <doltypes.h>

#include <cstdarg>
#include <cstdio>

#include "../../dolphin/os.h"

struct JUTDirectPrint {
	static JUTDirectPrint *sDirectPrint;
	static byte sAsciiTable[];
	static byte sFontData[];
	static byte sFontData2[];

	void *framebuffer;
	ushort width, height, scanwidth;
	uint totalsize;
	uint __unused;
	void *oldframebuffer;

	JUTDirectPrint() {
		changeFrameBuffer(nullptr, 0, 0);
	}

	void changeFrameBuffer(void *param_1, ushort param_2, ushort param_3) {
		this->framebuffer = param_1;
		this->oldframebuffer = param_1;
		this->width = param_2;
		this->height = param_3;
		this->scanwidth = param_2 + 0xf & 0xfff0;
		this->totalsize = (uint)this->scanwidth * (uint)this->height * 2;
	}

	void erase(int param_1, int param_2, int param_3, int param_4) {
		undefined2 *puVar1;
		int iVar2;
		int iVar3;

		if (this->framebuffer == (void *)0x0) {
			return;
		}
		if (400 < this->width) {
			param_1 = param_1 << 1;
			param_3 = param_3 << 1;
		}
		if (300 < this->height) {
			param_2 = param_2 << 1;
			param_4 = param_4 << 1;
		}
		puVar1 = (undefined2 *)((int)this->oldframebuffer + (uint)this->scanwidth * param_2 * 2 + param_1 * 2);
		for (iVar2 = 0; iVar2 < param_4; iVar2 = iVar2 + 1) {
			iVar3 = param_3;
			if (0 < param_3) {
				do {
					*puVar1 = 0x1080;
					puVar1 = puVar1 + 1;
					iVar3 = iVar3 + -1;
				} while (iVar3 != 0);
			}
			puVar1 = puVar1 + ((uint)this->scanwidth - param_3);
		}
	}

	void drawChar(int param_1, int param_2, int param_3) {
		ushort uVar1;
		undefined2 uVar3;
		int iVar2;
		undefined1 *puVar4;
		int *piVar5;
		int iVar6;
		int iVar7;
		int iVar8;
		int iVar9;
		int iVar10;
		int iVar11;
		int iVar12;
		uint uVar13;
		int iVar14;

		iVar6 = param_3;
		if (99 < param_3) {
			iVar6 = param_3 + -100;
		}
		puVar4 = JUTDirectPrint::sFontData2;
		if (param_3 < 100) {
			puVar4 = JUTDirectPrint::sFontData;
		}
		piVar5 = (int *)(puVar4 + (iVar6 / 5) * 0x1c);
		iVar8 = 2 - (uint)(this->width < 400);
		iVar7 = 2 - (uint)(this->height < 300);
		iVar9 = (int)this->oldframebuffer +
				iVar7 * (uint)this->scanwidth * param_2 * 2 + param_1 * iVar8 * 2;
		iVar10 = 0;
		do {
			uVar13 = *piVar5 << (iVar6 % 5) * 6;
			iVar12 = 0;
			piVar5 = piVar5 + 1;
			do {
				uVar3 = 0x80;
				if ((uVar13 & 0x80000000) != 0) {
					uVar3 = 0xeb80;
				}
				for (iVar11 = 0; iVar11 < iVar7; iVar11 = iVar11 + 1) {
					uVar1 = this->scanwidth;
					iVar2 = 0;
					iVar14 = iVar8;
					if (0 < iVar8) {
						do {
							*(undefined2 *)(iVar9 + (uint)uVar1 * iVar11 * 2 + iVar2) = uVar3;
							iVar2 = iVar2 + 2;
							iVar14 = iVar14 + -1;
						} while (iVar14 != 0);
					}
				}
				uVar13 = uVar13 << 1;
				iVar9 = iVar9 + iVar8 * 2;
				iVar12 = iVar12 + 1;
			} while (iVar12 < 6);
			iVar9 = iVar9 + ((uint)this->scanwidth * iVar7 + iVar8 * -6) * 2;
			iVar10 = iVar10 + 1;
		} while (iVar10 < 7);
		return;
	}

	void printSub(ushort param_1, ushort param_2, char *param_3, va_list param_4,
				  bool param_5) {
		int iVar1;
		uint uVar2;
		uint uVar3;
		uint uVar4;
		byte *pbVar5;
		byte local_128[264];

		uVar4 = (uint)param_2;
		if (this->oldframebuffer != (void *)0x0) {
			iVar1 = vsnprintf((char *)local_128, 0x100, param_3, param_4);
			if (0 < iVar1) {
				if (param_5 != false) {
					erase(param_1 - 6, param_2 - 3, (iVar1 + 2) * 6, 0xd);
				}
				pbVar5 = local_128;
				uVar3 = (uint)param_1;
				for (; 0 < iVar1; iVar1 = iVar1 + -1) {
					uVar2 = JUTDirectPrint::sAsciiTable[*pbVar5 & 0x7f];
					if (uVar2 == 0xfe) {
						uVar4 = uVar4 + 7;
						uVar3 = (uint)param_1;
					} else if (uVar2 == 0xfd) {
						uVar3 = ((uVar3 & 0xffff) + 0x30) -
									(int)(((uVar3 & 0xffff) - (uint)param_1) + 0x2f) % 0x30 &
								0xffff;
					} else {
						if (uVar2 != 0xff) {
							drawChar(uVar3 & 0xffff, uVar4 & 0xffff, uVar2);
						}
						uVar3 = uVar3 + 6;
					}
					pbVar5 = pbVar5 + 1;
				}
			}
			os::DCFlushRange(this->oldframebuffer, this->totalsize);
		}
	}

	void drawString(ushort param_1, ushort param_2, char *param_3) {
		drawString_f(param_1, param_2, "%s", param_3);
	}

	void drawString_f(ushort param_1, ushort param_2, char *param_3, ...) {
		va_list ap;
		va_start(ap, param_3);
		if (oldframebuffer)
			printSub(param_1, param_2, param_3, ap, false);
		va_end(ap);
	}

	static JUTDirectPrint *start(void) {
		JUTDirectPrint *self;

		self = JUTDirectPrint::sDirectPrint;
		if (!JUTDirectPrint::sDirectPrint) {
			self = new JUTDirectPrint();
		}
		JUTDirectPrint::sDirectPrint = self;
		return self;
	}
};

byte JUTDirectPrint::sAsciiTable[] = {0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0xfd, 0xfe, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x29, 0x64, 0x65, 0x66, 0x2b, 0x67, 0x68, 0x25, 0x26, 0x69, 0x2a, 0x6a, 0x27, 0x2c, 0x6b, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x24, 0x6c, 0x6d, 0x6e, 0x6f, 0x28, 0x70, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x71, 0x72, 0x73, 0x74, 0x75, 0xff, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x76, 0x77, 0x78, 0x79, 0x7a};
byte JUTDirectPrint::sFontData[] = {0x70, 0x87, 0x1c, 0x30, 0x89, 0x88, 0xa2, 0x50, 0x88, 0x80, 0x82, 0x90, 0x88, 0x83, 0x0c, 0x90, 0x88, 0x84, 0x02, 0xf8, 0x88, 0x88, 0x22, 0x10, 0x71, 0xcf, 0x9c, 0x10, 0xf9, 0xcf, 0x9c, 0x70, 0x82, 0x08, 0xa2, 0x88, 0xf2, 0x00, 0xa2, 0x88, 0x0b, 0xc1, 0x1c, 0x78, 0x0a, 0x22, 0x22, 0x08, 0x8a, 0x22, 0x22, 0x08, 0x71, 0xc2, 0x1c, 0x70, 0x23, 0xc7, 0x38, 0xf8, 0x52, 0x28, 0xa4, 0x80, 0x8a, 0x28, 0x22, 0x80, 0x8b, 0xc8, 0x22, 0xf0, 0xfa, 0x28, 0x22, 0x80, 0x8a, 0x28, 0xa4, 0x80, 0x8b, 0xc7, 0x38, 0xf8, 0xf9, 0xc8, 0x9c, 0x08, 0x82, 0x28, 0x88, 0x08, 0x82, 0x08, 0x88, 0x08, 0xf2, 0xef, 0x88, 0x08, 0x82, 0x28, 0x88, 0x88, 0x82, 0x28, 0x88, 0x88, 0x81, 0xc8, 0x9c, 0x70, 0x8a, 0x08, 0xa2, 0x70, 0x92, 0x0d, 0xa2, 0x88, 0xa2, 0x0a, 0xb2, 0x88, 0xc2, 0x0a, 0xaa, 0x88, 0xa2, 0x08, 0xa6, 0x88, 0x92, 0x08, 0xa2, 0x88, 0x8b, 0xe8, 0xa2, 0x70, 0xf1, 0xcf, 0x1c, 0xf8, 0x8a, 0x28, 0xa2, 0x20, 0x8a, 0x28, 0xa0, 0x20, 0xf2, 0x2f, 0x1c, 0x20, 0x82, 0xaa, 0x02, 0x20, 0x82, 0x49, 0x22, 0x20, 0x81, 0xa8, 0x9c, 0x20, 0x8a, 0x28, 0xa2, 0x88, 0x8a, 0x28, 0xa2, 0x88, 0x8a, 0x28, 0x94, 0x88, 0x8a, 0x2a, 0x88, 0x50, 0x89, 0x4a, 0x94, 0x20, 0x89, 0x4a, 0xa2, 0x20, 0x70, 0x85, 0x22, 0x20, 0xf8, 0x01, 0x10, 0x00, 0x08, 0x02, 0x08, 0x00, 0x10, 0x84, 0x04, 0x00, 0x20, 0x04, 0x04, 0x70, 0x40, 0x84, 0x04, 0x00, 0x80, 0x02, 0x08, 0x00, 0xf8, 0x01, 0x10, 0x00, 0x70, 0x80, 0x00, 0x00, 0x88, 0x82, 0x22, 0x00, 0x08, 0x82, 0x04, 0x00, 0x10, 0x8f, 0x88, 0x00, 0x20, 0x82, 0x10, 0x00, 0x00, 0x02, 0x22, 0x00, 0x20, 0x80, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00};
byte JUTDirectPrint::sFontData2[] = {0x51, 0x42, 0x18, 0x20, 0x53, 0xe7, 0xa4, 0x20, 0x01, 0x4a, 0x2c, 0x40, 0x01, 0x47, 0x10, 0x00, 0x01, 0x42, 0xaa, 0x00, 0x03, 0xea, 0xa4, 0x00, 0x01, 0x47, 0x1a, 0x78, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x80, 0x10, 0x20, 0x01, 0x08, 0x20, 0xf8, 0x02, 0x00, 0x40, 0x20, 0x42, 0x08, 0x20, 0x50, 0x44, 0x10, 0x10, 0x00, 0x88, 0x00, 0x00, 0x00, 0x07, 0x0e, 0x00, 0x01, 0x08, 0x88, 0x40, 0x78, 0x89, 0x88, 0x20, 0x00, 0x4a, 0x88, 0x10, 0x78, 0x8a, 0x88, 0x10, 0x01, 0x09, 0x88, 0x08, 0x00, 0x04, 0x0e, 0x04, 0x70, 0x80, 0x06, 0x20, 0x11, 0x40, 0x08, 0x20, 0x12, 0x20, 0x08, 0x20, 0x10, 0x00, 0x10, 0x20, 0x10, 0x00, 0x08, 0x20, 0x10, 0x0f, 0x88, 0x20, 0x70, 0x00, 0x06, 0x20, 0x60, 0x07, 0x00, 0x00, 0x11, 0x0f, 0x82, 0xa0, 0x12, 0xaa, 0x8a, 0xe0, 0x08, 0x4f, 0x92, 0xa0, 0x10, 0x0f, 0xbe, 0x1c, 0x10, 0x08, 0x90, 0x08, 0x60, 0x07, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x7a, 0x07, 0x82, 0x70, 0x8b, 0xc8, 0x1e, 0x88, 0x8a, 0x28, 0x22, 0xf8, 0x9a, 0x28, 0x22, 0x80, 0x6b, 0xc7, 0x9e, 0x78, 0x30, 0x00, 0x00, 0x00, 0x48, 0x08, 0x08, 0x10, 0x41, 0xe8, 0x00, 0x00, 0x42, 0x2f, 0x18, 0x30, 0xfb, 0xe8, 0x88, 0x10, 0x40, 0x28, 0x88, 0x90, 0x43, 0xc8, 0x9c, 0x60, 0x81, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x99, 0x0f, 0x3c, 0x70, 0xa1, 0x0a, 0xa2, 0x88, 0xe1, 0x0a, 0xa2, 0x88, 0xa1, 0x0a, 0xa2, 0x88, 0x98, 0xca, 0xa2, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xf1, 0xef, 0x1e, 0x20, 0x8a, 0x28, 0xa0, 0xf8, 0x8a, 0x28, 0x1c, 0x20, 0xf1, 0xe8, 0x02, 0x20, 0x80, 0x28, 0x3c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8a, 0x28, 0xb6, 0x88, 0x8a, 0x2a, 0x88, 0x88, 0x8a, 0x2a, 0x88, 0x78, 0x89, 0x4a, 0x88, 0x08, 0x78, 0x85, 0x36, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};